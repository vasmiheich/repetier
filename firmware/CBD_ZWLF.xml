<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<firmware style="cbd">
    <!--
    This Firmware has some known bugs in communication:
    - sends "wait" instead of "busy: processing" breaking regular firmware
    - Can not handle M110 with line number N
    - Needs number after XYZE in M84, M18, G28

   Firmware is also a minimalist. Unknown commands are just ack'ed.
    -->
    <name>Chitu (CBD/ZWLF)</name>
    <!-- Commands send on connect. Use newline to insert multiple commands -->
    <connectionCommands>M110
        M105
        M115
        M220 S100
        M221 S100
        G92 E0
        G90
        M82
        G21
        M114
    </connectionCommands>
    <!-- Define main communication behaviour
    okAfterResend - true id after resend:line a line with ok follows
    protocol - Used communication protocol repetier or ascii
    allowColonInAscii - Some firmwares have problems with : in ascii content like M117
    allowUTF8 - true if firmware supports UTF8 in commands. Some firmwares have problems with UTF8.
    -->
    <com okAfterResend="false" protocol="ascii" allowColonInAscii="false" allowUTF8="false"/>
    <!-- Is there a way to query and change eeprom settings?
      none - No
      repetier - Repetier format queried with M205 and set with M206
      marlin - Marlin style report for M503
      mk4duo - Mk4due style report for M503 -->
    <eepromType>none</eepromType>
    <!-- Server assumes ramge 0..255 for heater power reported in @ - sets multiplier if firmware has a lower range. -->
    <temperatureOutputMultiplier>2</temperatureOutputMultiplier>
    <!-- Defines how firmware handles busy messages. "strict" means ALL commands even known slow commands will
     send busy messages. "relaxed" means some slow commands might not send busy. -->
    <busyHandling>relaxed</busyHandling>
    <bugfix name="M110_STRIP_N1" command="M110" />
    <bugfix name="ADD_XYZE0" command="M84" />
    <bugfix name="ADD_XYZE0" command="M18" />
    <bugfix name="ADD_XYZE0" command="G28" />
    <bugfix name="FORBIDE_N" command="M117" />
    <!-- These gcodes are known to take longer. When no busy support is detected or busy mode is relaxed
    these will not trigger a timeout for a long time. -->
    <blockingCommands>
        <command>M109</command>
        <command>M190</command>
        <command>M116</command>
        <command>M303</command>
        <command>M400</command>
        <command>M226</command>
        <command>M600</command>
        <command>M0</command>
        <command>M1</command>
        <command>M48</command>
        <command>M300</command>
        <command>M862</command>
        <command>M863</command>
        <command>G4</command>
        <command>G28</command>
        <command>G29</command>
        <command>G32</command>
        <command>G30</command>
        <command>G33</command>
        <command>G80</command>
    </blockingCommands>
    <!-- Normally the repetier-server tracks the position by the commands that get send.
    But some commands change the position to an unknown position. Often these report
    the position, so we can read and use them, except we had already sent move commands since
    sending a position response. These instructions help to decide if we can trust position report
    or if we have to assume that it is already invalidated.
    In <motionCommand the positionReport defines how positions are reported by firmware. Possible values:
    relative - identical to values used in G0-G3 including G92 offsets.
    absolute - excluding G92 offsets

    The <command> tags contain the motion command that if contained mark it as motion. With attribute
    reportPosition you can define if a report will happen. Default value is no. Possible values:
    no - No report expected
    yes - Always reports
    force - Append "reportPosition" gcodes to be sure we get a position that is copied.
    ask - Send M114 afterwards to ensure it is queried in case that firmware version does not report position.
    -->
    <motionCommands positonReport="relative">
        <command>G0</command>
        <command>G1</command>
        <command>G2</command>
        <command>G3</command>
        <command reportPosition="ask">G28</command>
        <command reportPosition="ask">G29</command>
        <command reportPosition="ask">G30</command>
        <command reportPosition="force">G33</command>
        <command reportPosition="yes" move="no">M114</command>
    </motionCommands>
    <!-- These gcodes are expected to have a text parameter as last parameter -->
    <gcodeWithText>
        <m>0</m>
        <m>1</m>
        <m>20</m>
        <m>23</m>
        <m>28</m>
        <m>29</m>
        <m>32</m>
        <m>30</m>
        <m>36</m>
        <m>117</m>
        <m>118</m>
        <m>3117</m>
        <m>531</m>
    </gcodeWithText>
    <!-- Priority commands are always put in front of commands to be sent.
    If the <command> tag has the emergency="true" flag it will also be sent
    when the regular buffer is full using reserved buffer for emergency command.
    At least if emergency support was reported from firmware.
    -->
    <priorityCommands allowOverflowBuffer="true">
        <command emergency="true">M112</command>
        <command emergency="true">M108</command>
        <command>M290</command>
        <command emergency="true">M410</command>
        <command emergency="true">M876</command>
        <command>@usbreset</command>
        <command emergency="true">@fakeok</command>
    </priorityCommands>
    <!-- Inside the server we use a lot of commands, and we do not always assume they
    are the same for all firmwares. In that case we define them here with the <command> tag.
    type="..." is the predefined name for the action. When these are added all parameter get
    a name dependent on the command. You can include the parameter as integer {i:name}
    or as float value {f:name}. If you need several gcodes for the execution split them using newline.
    -->
    <command type="setFlowMultiply">M221 S{i:flowPercent}</command>
    <command type="setSpeedMultiply">M220 S{i:speedPercent}</command>
    <command type="requestTemperature">M105</command>
    <command type="disableFan">M107 P{i:fanId}</command>
    <command type="setFanSpeed">M106 P{i:fanId} S{i:fanSpeed}</command>
    <command type="motorsOff">M84</command>
    <command type="powerOff">M81</command>
    <command type="powerOn">M80</command>
    <command type="setBedTemperature">M140 S{i:temperature}</command>
    <command type="setChamberTemperature">M141 S{i:temperature}</command>
    <command type="setChamberTemperatureWait">M191 S{i:temperature}</command>
    <command type="setBedTemperatureWait">M190 S{i:temperature}</command>
    <command type="setExtruderTemperature">M104 S{i:temperature} T{i:extruder}</command>
    <command type="setExtruderTemperatureWait">M109 S{i:temperature} T{i:extruder}</command>
    <command type="unblock">M999</command>
    <command type="caseLightsOn">M355 S1</command>
    <command type="caseLightsOff">M355 S0</command>
    <command type="emergencyStop">M112</command>
    <command type="reportPosition">M114
        ;@syncMotion</command>
    <command type="babystepZ">M290 S{f:babyz}</command>
    <command type="waitEndOfMoves">M400</command>
    <command type="continueFatalStop">M999
        M110
    </command>
    <command type="startPrint">M530 S1 L{i:numLayer}
        M531 {s:filename}
        M532 X0 L0
    </command>
    <command type="stopPrint">M530 S0
M77</command>
    <command type="sendProgress">M532 X{f:progress} L{i:currentLayer}</command>
    <command type="sendSimpleProgress">M73 P{i:progress} R{i:minutes}</command>
    <command type="startAutoreportTemps">M155 S1</command>
    <command type="hostRescueQuery">M415</command>
    <command type="hostRescueStart">M999
M415 S1</command>
    <command type="resetLineNumber">M110</command>
    <command type="hostRescueStop">M415 S0</command>
    <command type="hostRescueSetZ">M415 Z{f:rescueZ}</command>
    <command type="testConnectionSmall">M114</command>
    <command type="testConnectionLong">M114 P0 X45.374 Y78.233 E0.0234</command>
    <command type="testConnectionSlow">G4 P50</command>
    <command type="homeAll">G28</command>
    <command type="homeX">G28 X0</command>
    <command type="homeY">G28 Y0</command>
    <command type="homeZ">G28 Z0</command>
    <command type="autolevel">G28
G29</command>
    <command type="sendMessage">M117 {s:message}</command>
    <command type="quickComTest">M119</command> <!-- sends as dummy command to force getting an extra ok without delay -->
    <!-- Remove these commands from gcode scripts. Required if we provide it our self. -->
    <stripJobCommand>M73</stripJobCommand>
    <!-- Every firmware has its own format when it sends some messages. To detect them
    these are defined in <response> tags and the type=".." attribute defines the meaning of the
    response. When a response is supposed to deliver a value that value must be
    merged as first group in the regular expression. If the value needs to be scaled to the
    expected range you can use the factor="1" attribute. All values are float values by default.
    If a value is a string add the string="true" attribute. If there is no value, but you need
    to return a value provide it in the "value="1" attribute.
    If response expects multiple values the names of the group order are given as v1="name1",
    v2="name",...

    Parsing all responses is time-consuming. Therefore, we stop at the first match and
    run tests in order of appearance, so order matters. If multiple matches are
    possible put the attribute last="false" in it and place it BEFORE the
    response without it.
    -->
    <response type="verifiedConnection" value="1" last="false">^ok|^(echo:)?wait</response>
    <!-- Chitu writes respones after ok, adds N:line on commands returning nothing -->
    <response type="ok" value="-1" last="false">^ok\s*N?:?(\d*+)?</response>
    <response type="resetTimeout">^(echo:)?wait</response> <!-- modified to fit wrong response -->
    <response type="resend">^[Rr]esend:\s*(\d+)$</response>
    <response type="resend">^rs:\s*(\d+)$</response>
<!--    <response type="potentialOk" value="-1">^[^o]?k\s?N?(\d*+)?</response>-->
    <response type="unknownCommand" string="true">Unknown [MG] code:.*([MG]\d+)$</response>
    <response type="unknownCommand" string="true">^[Ee]cho:Unknown command: &quot;([MG]\d+)</response>
    <response type="firmwareUrl" string="true" last="false">FIRMWARE_URL:\s*([^\s]+)</response>
    <response type="firmwareName" string="true" last="false">FIRMWARE_NAME:\s*([^\s]+)</response>
    <response type="protocolVersion" string="true" last="false">PROTOCOL_VERSION:\s*([^\s]+)</response>
    <response type="machineType" string="true" last="false">MACHINE_TYPE:\s*([^\s]+)</response>
    <response type="extruderCountSend" last="false">EXTRUDER_COUNT:\s*(\d+)</response>
    <response type="reset" value="1">^start$</response>
    <response type="sdMounted" value="0">^SD card removed$</response>
    <response type="sdMounted" value="1">^SD card inserted$</response>
    <response type="sdPrintStopped" value="1">^SD print stopped by user.$</response>
    <response type="blocked">M999 to restart</response>
    <response type="halted">^Error:Printer halted</response>
    <response type="halted">^!!</response>
    <response type="noACK" value="-1" last="false">^ok [^NT]</response><!-- all answers are in ok messages appended! -->
    <response type="requestPause" string="true">RequestPause:(.*)</response>
    <response type="continuePause">RequestContinue:</response>
    <response type="requestPauseNoScript" string="true">//\s*action:paused\b\s*(.*)</response>
    <response type="continuePauseNoScript">//\s*action:resumed\b</response>
    <response type="requestPause" string="true">//\s*action:pause\b\s*(.*)</response>
    <response type="continuePause">//\s*action:resume\b</response>
    <response type="stopPrint">//\s*action:cancel\b</response>
    <response type="disablePrinter">//\s*action:disconnect\b</response>
    <response type="activeExtruder">^Active Extruder:\s*(\d+)</response>
    <!-- not supported mean busy <response type="emptyQueue" value="1">^wait$</response> -->
    <response type="fatal">(.*M999.*)</response>
    <response type="progressView">^Cap:PROGRESS:(\d)</response>
    <response type="doorState">^Cap:DOOR:(\d)</response>
    <response type="doorOpened">DoorOpened$</response>
    <response type="doorClosed">DoorClosed$</response>
    <response type="autoreportTempSupported">^Cap:AUTOREPORT_TEMP:(\d)</response>
    <response type="zprobeSupported">^Cap:Z_PROBE:(\d)</response>
    <response type="autolevelSupported">^Cap:AUTOLEVEL:(\d)</response>
    <response type="eepromSupported">^Cap:EEPROM:(\d)</response>
    <response type="eepromSupported">^Cap:EEPROM:(\d)</response>
    <response type="toggleLightsSupported">^Cap:TOGGLE_LIGHTS:(\d)</response>
    <response type="thermalProtection">^Cap:THERMAL_PROTECTION:(\d)</response>
    <response type="emergencyParser">^Cap:EMERGENCY_PARSER:(\d)</response>
    <response type="hostRescue">^Cap:HOST_RESCUE:(\d)</response>
    <response type="outOfFilament">^[eE]cho:enqueu?e?ing &quot;M600&quot;</response>
    <response type="outOfFilamentPause" string="true">//\s*action:out_of_filament\b\s*(T\d+)?</response>
    <response type="runScript" string="true">//\s*run_script:(.*)</response>
    <response type="illegalCommand" string="true">//sd cmd error cnt:.*? len:.*? :(.*)</response>
    <!-- <response type="unknownCommand" string="true">Contain Unknown opts:.*([MG]\d+)</response> -->
    <response type="ack">Percent done</response>

    <!-- unsupported responses
    <response type="repetierVersion">REPETIER_PROTOCOL:(\d+)</response>
    <response type="emptyQueue" value="1">^wait$</response>
    <response type="flowMultiplier" factor="1">FlowMultiply:(\d+)</response>
    <response type="speedMultiplier" factor="1">SpeedMultiply:(\d+)</response>
    <response type="repEeprom" string="true" v1="type" v2="pos" v3="value" v4="text">EPR:\s*(\d+)\s+(\d+)\s+(\d+\.*\d*)\s+(.*)$</response>
    <response type="fanSpeed" factor="1">Fanspeed:(\d+)</response>
    -->

    <!-- T:22.92 /0 B:22.78 /0 B@:0 @:0 T0:22.92 /0 @0:0 T1:24.86 /0 @1:0 -->
    <!-- When we query settings from printer we send these values to detect them. -->
    <getSettings>M115
        M27
        M106 S20
        M107
        M105
        M503
        M113
        M211
        #version
    </getSettings>
    <!-- For every setting we want to query there is a <setting> tag.
    The type=".." tells the required name and the tag content is the regular expression
    to detect and extract the value form the first matched group. Preset values can be
    given with value="1" attribute. If the matched value need a value added use
    valueAdd="1" attribute. Useful when index starts with 0 and 1 is expected for example.
    Some responses are for a special part e.g. second extruder. In that case provide inside
     the index=".." attribute a regular expression where first group is the index value.
     With indexAdd="1" attribute you can modify the index to expected offset.
    -->
    <setting type="firmwareCommunicationWorking" value="1">CBD make it</setting>
    <setting type="differentFirmware" string="RepRapFirmware">FIRMWARE_NAME:\s*RepRapFirmware</setting>
    <setting type="differentFirmware" string="Smoothieware">System Clock:</setting>
    <setting type="differentFirmware" string="Repetier-Firmware">REPETIER_PROTOCOL</setting>
    <setting type="differentFirmware" string="Klipper">FIRMWARE_NAME:Klipper</setting>
    <setting type="differentFirmware" string="MK4duo">FIRMWARE_NAME:\s*MK4duo</setting>

    <setting type="xPrintAcceleration">M201 .*X(\d+\.?\d*)</setting>
    <setting type="yPrintAcceleration">M201 .*Y(\d+\.?\d*)</setting>
    <setting type="zPrintAcceleration">M201 .*Z(\d+\.?\d*)</setting>
    <setting type="xTravelAcceleration">M201 .*X(\d+\.?\d*)</setting>
    <setting type="yTravelAcceleration">M201 .*Y(\d+\.?\d*)</setting>
    <setting type="zTravelAcceleration">M201 .*Z(\d+\.?\d*)</setting>

    <setting type="maxXSpeed">M203 .*X(\d+\.?\d*)</setting>
    <setting type="maxYSpeed">M203 .*Y(\d+\.?\d*)</setting>
    <setting type="maxZSpeed">M203 .*Z(\d+\.?\d*)</setting>

    <setting type="XStepsPerMM">M92 X(\d+\.?\d*)</setting>
    <setting type="YStepsPerMM">M92 Y(\d+\.?\d*)</setting>
    <setting type="ZStepsPerMM">M92 Z(\d+\.?\d*)</setting>
    <setting type="extrStepsPerMM">M92 E(\d+\.?\d*)</setting>
    <setting type="extrMaxSpeed">M203 .*E(\d+\.?\d*)</setting>
    <setting type="extrAcceleration">M203 .*E(\d+\.?\d*)</setting>
    <setting type="hasHeatedBed" value="1">B:\d+.?\d*</setting>
    <setting type="extruderCountSend">EXTRUDER_COUNT:\s*(\d+)</setting>
    <setting type="KeepAliveInterval" factor="1000" valueAdd="1000">^echo:M113 S([+-]?\d+\.?\d*)</setting>
    <!-- Recv: echo:Soft endstops: On   Min: X0.00 Y0.00 Z0.00  Max: X230.00 Y290.00 Z340.00 -->
    <setting type="XMin">^echo:Soft.*Min:.*X([+-]?\d+\.?\d*).*:</setting>
    <setting type="YMin">^echo:Soft.*Min:.*Y([+-]?\d+\.?\d*).*:</setting>
    <setting type="ZMin">^echo:Soft.*Min:.*Z([+-]?\d+\.?\d*).*:</setting>
    <setting type="XMax">^echo:Soft.*Max:.*X([+-]?\d+\.?\d*)</setting>
    <setting type="YMax">^echo:Soft.*Max:.*Y([+-]?\d+\.?\d*)</setting>
    <setting type="ZMax">^echo:Soft.*Max:.*Z([+-]?\d+\.?\d*)</setting>
    <!-- Some commands change firmware behaviour that is important for timing computations.
    These are detected with the <paramChange> rules. name=".." attribute defines the modified parameter
    and code is the gcode that changes it for quick detection. The contained regular expression
    returns to the first group the value for the parameter changed. The scale="1" factor can scale the
    factor if needed.
    -->
    <paramChange name="accelPrintX" code="M201">M201.*X([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="accelPrintY" code="M201">M201.*Y([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="accelPrintZ" code="M201">M201.*Z([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="accelPrintE" code="M201">M201.*E([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="accelTravelX" code="M201">M201.*X([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="accelTravelY" code="M201">M201.*Y([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="accelTravelZ" code="M201">M201.*Z([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="maxFeedrateX" code="M203">M203.*X([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="maxFeedrateY" code="M203">M203.*Y([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="maxFeedrateZ" code="M203">M203.*Z([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="maxFeedrateE" code="M203">M203.*E([+-]?\d+\.?\d*)</paramChange>
    <!--  M204 S[normal moves] T[filament only moves] -->
    <paramChange name="accelPrint" code="M204">M204.*S([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="accelTravel" code="M204">M204.*S([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="accelExtrude" code="M204">M204.*S.*T([+-]?\d+\.?\d*)</paramChange>
    <!--new format: M204 P[printing moves] R[filament only moves] T[travel moves] (as of now T is ignored) -->
    <paramChange name="accelPrint" code="M204">M204.*P([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="accelTravel" code="M204">M204.*P.*T([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="accelExtrude" code="M204">M204.*R([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="xyJerk" code="M205">M205.*X([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="zJerk" code="M205">M205.*Z([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="eJerk" code="M205">M205.*E([+-]?\d+\.?\d*)</paramChange>
    <!-- The following parameter can not be obtained from marlin
        <setting type="extrJerk" indexAdd="-1" index=" Extr.(\d+) ">(\d+\.?\d*) Extr.\d+ start feedrate \[mm/s\]</setting>
        <setting type="XMin">([+-]?\d+\.?\d*) X home pos \[mm\]</setting>
        <setting type="YMin">([+-]?\d+\.?\d*) Y home pos \[mm\]</setting>
        <setting type="ZMin">([+-]?\d+\.?\d*) Z home pos \[mm\]</setting>
        <setting type="XLength">(\d+\.?\d*) X max length \[mm\]</setting>
        <setting type="YLength">(\d+\.?\d*) Y max length \[mm\]</setting>
        <setting type="ZLength">(\d+\.?\d*) Z max length \[mm\]</setting>
        <setting type="baudrate">(\d+) Baudrate</setting>
        <setting type="xyJerk">(\d+\.?\d*) Max. jerk</setting>
        <setting type="zJerk">(\d+\.?\d*) Max. Z-jerk</setting>
        <setting type="printableRadius">(\d+\.?\d*) Max printable radius</setting>
        <setting type="printerType" value="1">Z\-axis acceleration</setting>
        <setting type="printerType" value="2">Diagonal rod length</setting>
        <setting type="sdInstalled" value="1">^SD printing byte</setting>
        <setting type="fanInstalled" value="1">^Fanspeed:</setting> -->
    <recover>
        <!-- Recover replays print but only executes the commands below. Temperature wait commands can be replaced
        by the non-waiting equivalent. Server will wait before the first move until the last set temperatures are
        reached. It will also activate the correct extruder before continue. -->
        <execute code="G20"></execute>
        <execute code="G21"></execute>
        <execute code="G90"></execute>
        <execute code="G91"></execute>

        <execute code="M82"></execute>
        <execute code="M83"></execute>
        <execute code="M85"></execute>
        <execute code="M92"></execute>
        <execute code="M104"></execute>
        <execute code="M106"></execute>
        <execute code="M107"></execute>
        <execute code="M109" replace="M104"></execute>
        <execute code="M140"></execute>
        <execute code="M141"></execute>
        <execute code="M163"></execute>
        <execute code="M190" replace="M140"></execute>
        <execute code="M191" replace="M141"></execute>
        <execute code="M200"></execute>
        <execute code="M201"></execute>
        <execute code="M202"></execute>
        <execute code="M203"></execute>
        <execute code="M204"></execute>
        <execute code="M280"></execute>
        <execute code="M403"></execute>
        <execute code="M221"></execute>
        <execute code="M220"></execute>
        <execute code="M900"></execute>
    </recover>
</firmware>
