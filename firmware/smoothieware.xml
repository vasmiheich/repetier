<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<firmware style="smoothieware">
    <!--
    G-Code description: http://smoothieware.org/supported-g-codes
    -->
    <!-- Name of the firmware -->
    <name>Smoothieware</name>
    <!-- Commands send on connect. Use newline to insert multiple commands -->
    <connectionCommands>M110 N0
        M105
        M220 S100
        M221 S100
        G92 E0
        G90
        M82
        G21
    </connectionCommands>
    <!-- Define main communication behaviour
    okAfterResend - true id after resend:line a line with ok follows
    protocol - Used communication protocol repetier or ascii
    allowColonInAscii - Some firmwares have problems with : in ascii content like M117
    allowUTF8 - true if firmware supports UTF8 in commands. Some firmwares have problems with UTF8.
    -->
    <com okAfterResend="true" protocol="ascii" allowUTF8="false"/>
    <!-- Is there a way to query and change eeprom settings?
      none - No
      repetier - Repetier format queried with M205 and set with M206
      marlin - Marlin style report for M503
      mk4due - Mk4due style report for M503 -->
    <eepromType>none</eepromType>
    <!-- how is E relative handled
    preferRelative : G91 or E relative make it relative
    override: G90/G91 overrides E mode
    separate: G90/G91 do not influence E mode -->
    <g90_91>override</g90_91>
    <!-- Server assumes ramge 0..255 for heater power reported in @ - sets multiplier if firmware has a lower range. -->
    <temperatureOutputMultiplier>1</temperatureOutputMultiplier>
    <!-- Defines how firmware handles busy messages. "strict" means ALL commands even known slow commands will
     send busy messages. "relaxed" means some slow commands might not send busy. -->
    <busyHandling>relaxed</busyHandling>
    <!-- These gcodes are known to take longer. When no busy support is detected or busy mode is relaxed
    these will not trigger a timeout for a long time. -->
    <blockingCommands>
        <command>M109</command>
        <command>M190</command>
        <command>M116</command>
        <command>M303</command>
        <command>M400</command>
        <command>M226</command>
        <command>M600</command>
        <command>M0</command>
        <command>M1</command>
        <command>M48</command>
        <command>M300</command>
        <command>M862</command>
        <command>M863</command>
        <command>G4</command>
        <command>G28</command>
        <command>G29</command>
        <command>G32</command>
        <command>G30</command>
        <command>G33</command>
        <command>@usbreset</command>
    </blockingCommands>
    <!-- Normally the repetier-server tracks the position by the commands that get send.
    But some commands change the position to an unknown position. Often these report
    the position, so we can read and use them, except we had already sent move commands since
    sending a position response. These instructions help to decide if we can trust position report
    or if we have to assume that it is already invalidated.
    In <motionCommand the positionReport defines how positions are reported by firmware. Possible values:
    relative - identical to values used in G0-G3 including G92 offsets.
    absolute - excluding G92 offsets

    The <command> tags contain the motion command that if contained mark it as motion. With attribute
    reportPosition you can define if a report will happen. Default value is no. Possible values:
    no - No report expected
    yes - Always reports
    force - Append "reportPosition" gcodes to be sure we get a position that is copied.
    -->
    <motionCommands positonReport="relative">
        <command>G0</command>
        <command>G1</command>
        <command>G2</command>
        <command>G3</command>
        <command reportPosition="ask">G28</command>
        <command reportPosition="ask">G29</command>
        <command reportPosition="ask">G30</command>
        <command reportPosition="ask">G33</command>
        <command reportPosition="yes" move="no">M114</command>
    </motionCommands>
    <!-- These gcodes are expected to have a text parameter as last parameter -->
    <gcodeWithText>
        <m>20</m>
        <m>23</m>
        <m>28</m>
        <m>29</m>
        <m>32</m>
        <m>30</m>
        <m>36</m>
        <m>117</m>
        <m>118</m>
        <m>3117</m>
        <m>531</m>
    </gcodeWithText>
    <!-- Priority commands are always put in front of commands to be sent.
    If the <command> tag has the emergency="true" flag it will also be sent
    when the regular buffer is full using reserved buffer for emergency command.
    At least if emergency support was reported from firmware.
    -->
    <priorityCommands allowOverflowBuffer="true">
        <command emergency="true">M112</command>
        <command emergency="true">M108</command>
        <command>M290</command>
        <command emergency="true">M410</command>
        <command emergency="true">M876</command>
        <command emergency="true">@usbreset</command>
        <command emergency="true">@debugcon</command>
        <command emergency="true">@fakeok</command>
    </priorityCommands>
    <!-- Inside the server we use a lot of commands, and we do not always assume they
    are the same for all firmwares. In that case, we define them here with the <command> tag.
    type="..." is the predefined name for the action. When these are added all parameters get
    a name dependent on the command. You can include the parameter as integer {i:name}
    or as float value {f:name}. If you need several gcodes for the execution, split them using newline.
    -->
    <command type="setFlowMultiply">M221 S{i:flowPercent}</command>
    <command type="setSpeedMultiply">M220 S{i:speedPercent}</command>
    <command type="requestTemperature">M105</command>
    <command type="disableFan">M107 P{i:fanId}</command>
    <command type="setFanSpeed">M106 P{i:fanId} S{i:fanSpeed}</command>
    <command type="motorsOff">M18</command>
    <command type="setBedTemperature">M140 S{i:temperature}</command>
    <command type="setChamberTemperature">M141 S{i:temperature}</command>
    <command type="setChamberTemperatureWait">M191 S{i:temperature}</command>
    <command type="setBedTemperatureWait">M190 S{i:temperature}</command>
    <command type="setExtruderTemperature">M104 S{i:temperature} T{i:extruder}</command>
    <command type="setExtruderTemperatureWait">M109 S{i:temperature} T{i:extruder}</command>
    <command type="unblock">M999</command>
    <command type="resetLineNumber">M110 N0</command>
    <command type="emergencyStop">M112</command>
    <command type="reportPosition">M114
        ;@syncMotion</command>
    <command type="askPosition">M114</command>
    <command type="waitEndOfMoves">M400</command>
    <command type="testConnectionSmall">M114</command>
    <command type="testConnectionLong">M114 P0 X45.374 Y78.233 E0.0234</command>
    <command type="testConnectionSlow">G4 P50</command>
    <command type="homeAll">G28</command>
    <command type="homeX">G28 X0</command>
    <command type="homeY">G28 Y0</command>
    <command type="homeZ">G28 Z0</command>
    <command type="autolevel">G28 ; Home
G32 ; Level
M500 ; Save result</command>
    <command type="powerOff">M81</command>
    <command type="powerOn">M80</command>
    <command type="sendMessage">M117 {s:message}</command>
    <command type="recoverBadCondition">@kill
        M999</command>
    <command type="quickComTest">M119</command> <!-- sends as dummy command to force getting an extra ok without delay -->

    <!-- Every firmware has its own format when it sends some messages. To detect them
    these are defined in <response> tags and the type=".." attribute defines the meaning of the
    response. When a response is supposed to deliver a value that value must be
    merged as first group in the regular expression. If the value needs to be scaled to the
    expected range you can use the factor="1" attribute. All values are float values by default.
    If a value is a string add the string="true" attribute. If there is no value, but you need
    to return a value provide it in the "value="1" attribute.
    If response expects multiple values the names of the group order are given as v1="name1",
    v2="name",...

    Parsing all responses is time-consuming. Therefore, we stop at the first match and
    run tests in order of appearance, so order matters. If multiple matches are
    possible put the attribute last="false" in it and place it BEFORE the
    response without it.
    -->

    <response type="verifiedConnection" value="1" last="false">^ok$|^Smoothie$</response>
    <response type="ok" value="-1">^ok\s?(N?\d*)?</response>
    <response type="resend">^rs N(\d+)$</response>
    <response type="resend">^Resend:(\d+)$</response>
    <response type="reset" value="1">Smoothie^</response>
    <response type="conditionIgnoring">reset or M999</response>
    <response type="requestPause" string="true">//\s*action:pause\b\s*(.*)</response>
    <response type="continuePause">//\s*action:resume\b</response>
    <response type="stopPrint">//\s*action:cancel\b</response>
    <response type="disablePrinter">//\s*action:disconnect\b</response>
    <response type="requestPauseNoScript" string="true">//\s*action:paused\b\s*(.*)</response>
    <response type="continuePauseNoScript" string="true">//\s*action:resumed\b\s*(.*)</response>
    <response type="runScript" string="true">//\s*run_script:(.*)</response>


    <!-- unsupported responses
    <response type="repetierVersion">REPETIER_PROTOCOL:(\d+)</response>
    <response type="emptyQueue" value="1">^wait$</response>
    <response type="flowMultiplier" factor="1">FlowMultiply:(\d+)</response>
    <response type="speedMultiplier" factor="1">SpeedMultiply:(\d+)</response>
    <response type="repEeprom" string="true" v1="type" v2="pos" v3="value" v4="text">EPR:\s*(\d+)\s+(\d+)\s+(\d+\.*\d*)\s+(.*)$</response>
    <response type="fanSpeed" factor="1">Fanspeed:(\d+)</response>
    -->

    <!-- T:22.92 /0 B:22.78 /0 B@:0 @:0 T0:22.92 /0 @0:0 T1:24.86 /0 @1:0

    18:55:00: ; No config override
18:55:00: ;Steps per unit:
18:55:00: M92 X80.00000 Y80.00000 Z1600.00000
18:55:00: ;Acceleration mm/sec^2:
18:55:00: M204 S3000.00000 Z0.00000
18:55:00: ;X- Junction Deviation, Z- Z junction deviation, S - Minimum Planner speed:
18:55:00: M205 X0.05000 Z-1.00000 S0.00000
18:55:00: ;Max feedrates in mm/sec, XYZ cartesian, ABC actuator:
18:55:00: M203 X500.00000 Y500.00000 Z5.00000 A500.00000 B500.00000 C5.00000
18:55:00: ;Motor currents:
18:55:00: M907 X1.50000 Y1.50000 Z1.50000 E1.50000
18:55:00: ;Home offset (mm):
18:55:00: M206 X0.00 Y0.00 Z0.00
18:55:00: ;E Steps per mm:
18:55:00: M92 E140.0000 P57988
18:55:00: ;E Filament diameter:
18:55:00: M200 D0.0000 P57988
18:55:00: ;E retract length, feedrate:
18:55:00: M207 S3.0000 F2700.0000 Z0.0000 Q6000.0000 P57988
18:55:00: ;E retract recover length, feedrate:
18:55:00: M208 S0.0000 F480.0000 P57988
18:55:00: ;E acceleration mm/sec^2:
18:55:00: M204 E500.0000 P57988
18:55:00: ;PID settings:
18:55:00: M301 S0 P10.0000 I0.3000 D200.0000
18:55:00: ;PID settings:
18:55:00: M301 S1 P10.0000 I0.3000 D200.0000

    -->
    <!-- When we query settings from printer we send these values to detect them. -->
    <getSettings>M115
M503
#version
    </getSettings>
    <!-- For every setting we want to query there is a <setting> tag.
    The type=".." tells the required name and the tag content is the regular expression
    to detect and extract the value form the first matched group. Preset values can be
    given with value="1" attribute. If the matched value need a value added use
    valueAdd="1" attribute. Useful when index starts with 0 and 1 is expected for example.
    Some responses are for a special part e.g. second extruder. In that case provide inside
     the index=".." attribute a regular expression where first group is the index value.
     With indexAdd="1" attribute you can modify the index to expected offset.
    -->
    <setting type="firmwareCommunicationWorking" value="1">System Clock:</setting>
    <setting type="firmwareCommunicationWorking" value="1">X-SYSTEM_CLOCK:</setting>
    <setting type="firmwareCommunicationWorking" value="1">FIRMWARE_NAME:Smoothieware</setting>
    <setting type="differentFirmware" string="Repetier-Firmware">REPETIER_PROTOCOL</setting>
    <setting type="differentFirmware" string="Marlin">FIRMWARE_NAME:Marlin</setting>
    <setting type="differentFirmware" string="Chitu (CBD/ZWLF)">CBD make it</setting>
    <setting type="differentFirmware" string="Klipper">FIRMWARE_NAME:Klipper</setting>
    <setting type="differentFirmware" string="RepRapFirmware">FIRMWARE_NAME:\s*RepRapFirmware</setting>
    <setting type="differentFirmware" string="MK4duo">FIRMWARE_NAME:\s*MK4duo</setting>

    <setting type="xPrintAcceleration">M204 .*S(\d+\.?\d*)</setting>
    <setting type="yPrintAcceleration">M204 .*S(\d+\.?\d*)</setting>
    <setting type="zPrintAcceleration">M204 .*Z(\d+\.?\d*)</setting>
    <setting type="xTravelAcceleration">M204 .*S(\d+\.?\d*)</setting>
    <setting type="yTravelAcceleration">M204 .*S(\d+\.?\d*)</setting>
    <setting type="zTravelAcceleration">M204 .*Z(\d+\.?\d*)</setting>
    <setting type="maxXSpeed">M203 .*X(\d+\.?\d*)</setting>
    <setting type="maxYSpeed">M203 .*Y(\d+\.?\d*)</setting>
    <setting type="maxZSpeed">M203 .*Z(\d+\.?\d*)</setting>
    <setting type="xyJerk">M205 X(\d+\.?\d*)</setting>
    <setting type="RetractionLength">M207 .*S(\d+\.?\d*)</setting>
    <setting type="RetractionLongLength">M207 .*S(\d+\.?\d*)</setting>
    <setting type="RetractionSpeed" factor="0.016667">M207 F(\d+\.?\d*)</setting>
    <setting type="RetractionZLift">M207 .* Z(\d+\.?\d*)</setting>
    <setting type="RetractionUndoExtraLength">M208 S(\d+\.?\d*)</setting>
    <setting type="RetractionUndoExtraLongLength">M208 S(\d+\.?\d*)</setting>
    <setting type="RetractionUndoSpeed" factor="0.016667">M208 .*F(\d+\.?\d*)</setting>

    <setting type="XStepsPerMM">M92 X(\d+\.?\d*)</setting>
    <setting type="YStepsPerMM">M92 Y(\d+\.?\d*)</setting>
    <setting type="ZStepsPerMM">M92 Z(\d+\.?\d*)</setting>
    <setting type="extrAcceleration">M204 .*E(\d+\.?\d*)</setting>

    <!-- Some commands change firmware behaviour that is important for timing computations.
    These are detected with the <paramChange> rules. name=".." attribute defines the modified parameter
    and code is the gcode that changes it for quick detection. The contained regular expression
    returns to the first group the value for the parameter changed. The scale="1" factor can scale the
    factor if needed.
    -->
    <paramChange name="maxFeedrateX" code="M203">M203.*X([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="maxFeedrateY" code="M203">M203.*Y([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="maxFeedrateZ" code="M203">M203.*Z([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="maxFeedrateE" code="M203">M203.*E([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="accelPrint" code="M204">M204.*S([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="accelTravel" code="M204">M204.*S([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="accelPrintX" code="M204">M204.*X([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="accelPrintY" code="M204">M204.*Y([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="accelPrintZ" code="M204">M204.*Z([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="accelPrintE" code="M204">M204.*E([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="accelTravelX" code="M204">M204.*X([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="accelTravelY" code="M204">M204.*Y([+-]?\d+\.?\d*)</paramChange>
    <paramChange name="accelTravelZ" code="M204">M204.*Z([+-]?\d+\.?\d*)</paramChange>
    <recover>
        <!-- Recover replays print but only executes the commands below. Temperature wait commands can be replaced
        by the non-waiting equivalent. Server will wait before the first move until the last-set temperatures are
        reached. It will also activate the correct extruder before continue. -->
        <execute code="G20"></execute>
        <execute code="G21"></execute>
        <execute code="G90"></execute>
        <execute code="G91"></execute>

        <execute code="M82"></execute>
        <execute code="M83"></execute>
        <execute code="M85"></execute>
        <execute code="M92"></execute>
        <execute code="M104"></execute>
        <execute code="M106"></execute>
        <execute code="M107"></execute>
        <execute code="M109" replace="M104"></execute>
        <execute code="M140"></execute>
        <execute code="M141"></execute>
        <execute code="M163"></execute>
        <execute code="M190" replace="M140"></execute>
        <execute code="M191" replace="M141"></execute>
        <execute code="M200"></execute>
        <execute code="M201"></execute>
        <execute code="M202"></execute>
        <execute code="M203"></execute>
        <execute code="M204"></execute>
        <execute code="M280"></execute>
        <execute code="M221"></execute>
        <execute code="M220"></execute>
        <execute code="M900"></execute>
    </recover>
</firmware>
